package RTi.GRTS;

import RTi.Util.IO.IOUtil;
import java.awt.Graphics;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

/**
 * By keeping this code out of TSGraphJComponent (or other classes) and keeping
 * this classes interface API neutral with respect to batik, we can allow
 * batik functionality to be dynamically enabled/disabled by the presence of
 * those classes in the default classpath.
 * @author iws
 */
class TSGraphJComponent_SaveAsSVG {

    static Graphics createGraphics() {
        // Get a DOMImplementation.
        DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

        // Create an instance of org.w3c.dom.Document.
        String svgNS = "http://www.w3.org/2000/svg";
        Document document = domImpl.createDocument(svgNS, "svg", null);

        // Tell SVG to embed the fonts
        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
        ctx.setComment("Generated by " + IOUtil.getProgramName() + " with Batik SVG Generator");
        // Seems like the fonts are pretty ugly, at least when viewed in Internet Explorer Adobe plugin
        ctx.setEmbeddedFontsOn(true);

        // Create an instance of the SVG Generator.
        return new SVGGraphics2D(ctx, false);
    }
    
    static void saveGraphics(Graphics graphics,String path) throws IOException {
        // Finally, stream out SVG to the standard output using UTF-8 encoding.
        boolean useCSS = true; // we want to use CSS style attributes
        FileOutputStream outf = new FileOutputStream ( path );
        Writer out = new OutputStreamWriter(outf, "UTF-8");
        ((SVGGraphics2D)graphics).stream(out, useCSS);
        outf.flush();
        outf.close();
    }
}
